// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  UserName   String    @db.VarChar(255) @unique
  Password   String    @db.VarChar(255)
  Type       UserType? @default(user)
  Created_at DateTime  @default(now()) @db.Timestamp()
  // Updated_at DateTime  @updatedAt

  Account Account[]

  Session Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Student {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  FirstName    String    @db.VarChar(255)
  LastName     String    @db.VarChar(255)
  NationalCode String    @unique @db.VarChar(255)
  Father       String?   @db.VarChar(255)
  Birth        DateTime? @db.Date
  Address      String?   @db.VarChar(255)
  HomeNumber   String?   @db.VarChar(255)
  PhoneNumber  String?   @db.VarChar(255)
  fieldId      BigInt    @map("Field") @db.UnsignedBigInt
  Grade        Grade     @default(GRADE_7)
  Gender       Boolean   @default(true) @db.Bit(1)
  Updated_at   DateTime  @default(now()) @db.Timestamp()
  Created_at   DateTime  @default(now()) @db.Timestamp()

  field       Field        @relation(fields: [fieldId], references: [id])
  selectUnits SelectUnit[]
}


model Lesson {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  TeacherId      BigInt?      @db.UnsignedBigInt
  LessonName     String       @db.VarChar(255)
  PracticalUnit  Int
  TheoriUnit  Int
  Grade          LessonGrade? @default(GENERAL)
  fieldId        BigInt?      @map("Field") @db.UnsignedBigInt // no field id if lesson is general
  PassCondition  Int?
  TheoriHours    Int?         @default(0)
  PracticalHours Int?         @default(0)
  RequireLesson  BigInt?      @db.UnsignedBigInt
  RequireUnit    Int?
  NotifCode      BigInt?      @db.UnsignedBigInt
  ValidFrom      DateTime?    @default(now()) @db.Date
  ValidTill      DateTime?    @db.Date
  PricePerUnit   BigInt?      @db.BigInt
  Created_at     DateTime     @default(now()) @db.Timestamp()
  Updated_at     DateTime     @default(now()) @db.Timestamp()

  field             Field?           @relation(fields: [fieldId], references: [id])
  teacher           Teacher?         @relation(fields: [TeacherId], references: [id])
  requiredForLesson Lesson[]         @relation("LessonRequirement")
  requiresLesson    Lesson?          @relation("LessonRequirement", fields: [RequireLesson], references: [id])
  selectUnits       SelectUnit[]
  SelectedLesson    SelectedLesson[]
}

model SelectUnit {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  StudentId  BigInt   @db.UnsignedBigInt
  Year       Int
  Period     Period
  ExtraFee   BigInt?  @default(0) @db.UnsignedBigInt
  FixedFee   BigInt?  @default(0) @db.BigInt // fixed fee for the unit, not for the lesson
  CertificateFee BigInt? @default(0) @db.BigInt
  ExtraClassFee BigInt? @default(0) @db.BigInt
  BooksFee   BigInt?  @default(0) @db.BigInt
  Discount   BigInt?  @default(0) @db.UnsignedBigInt
  Paid       Boolean  @default(false) @db.Bit(1)
  Created_at DateTime @default(now()) @db.Timestamp()
  Updated_at DateTime @default(now()) @db.Timestamp()

  student         Student          @relation(fields: [StudentId], references: [id])
  selectedLessons SelectedLesson[]
  Lesson          Lesson?          @relation(fields: [lessonId], references: [id])
  lessonId        BigInt?          @db.UnsignedBigInt
  Payments        Payments[]

  @@unique([StudentId, Year, Period])
}

model SelectedLesson {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  selectUnitId BigInt @db.UnsignedBigInt
  lessonId     BigInt @db.UnsignedBigInt

  selectUnit SelectUnit @relation(fields: [selectUnitId], references: [id])
  lesson     Lesson     @relation(fields: [lessonId], references: [id])

  @@unique([selectUnitId, lessonId])
}

model Payments {
  id           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  Check        String?   @db.VarChar(255)
  BankName     String?   @db.VarChar(255)
  BranchCode   String?   @db.VarChar(255)
  Branch       String?   @db.VarChar(255)
  Amount       BigInt   @db.BigInt
  selectUnitId BigInt   @db.UnsignedBigInt
  PaymentDate  DateTime? @db.Date
  Created_at   DateTime @default(now()) @db.Timestamp()
  Updated_at   DateTime @default(now()) @db.Timestamp()

  selectUnit SelectUnit @relation(fields: [selectUnitId], references: [id])
}

model Field {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  Name       String   @db.VarChar(255)
  FixedFee   BigInt?  @default(0) @db.BigInt
  Created_at DateTime @default(now()) @db.Timestamp()
  Updated_at DateTime @default(now()) @db.Timestamp()

  students Student[]
  lessons  Lesson[]
  teachers Teacher[]
}

model General {
  Key        String   @id @db.VarChar(255)
  Value      String   @db.VarChar(255)
  Updated_at DateTime @default(now()) @db.Timestamp()
  Created_at DateTime @default(now()) @db.Timestamp()
}

model Teacher {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  NationalCode String    @unique @db.VarChar(255)
  FirstName    String    @db.VarChar(255)
  LastName     String    @db.VarChar(255)
  PhoneNumber  String    @db.VarChar(255)
  fieldId      BigInt?   @map("Field") @db.UnsignedBigInt
  Birth        DateTime? @db.Date
  Gender       Boolean   @default(true) @db.Bit(1)
  Updated_at   DateTime  @default(now()) @db.Timestamp()
  Created_at   DateTime  @default(now()) @db.Timestamp()

  field   Field?   @relation(fields: [fieldId], references: [id])
  lessons Lesson[]
}

enum Grade {
  GRADE_7  @map("7")
  GRADE_8  @map("8")
  GRADE_9  @map("9")
  GRADE_10 @map("10")
  GRADE_11 @map("11")
  GRADE_12 @map("12")
}

enum LessonGrade {
  GENERAL  @map("0")
  GRADE_7  @map("7")
  GRADE_8  @map("8")
  GRADE_9  @map("9")
  GRADE_10 @map("10")
  GRADE_11 @map("11")
  GRADE_12 @map("12")
}

enum UserType {
  admin
  user
}

enum Period {
  first
  second
  summer
}
